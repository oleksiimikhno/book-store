---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/carts/{cart_id}/cart_items":
    parameters:
    - name: product_id
      in: query
      description: ID of the product
      required: true
      schema:
        type: integer
    - name: cart_id
      in: path
      description: ID of the cart_item
      required: true
      schema:
        type: integer
    post:
      summary: create cart_item
      tags:
      - CartItems
      security:
      - Bearer: []
      parameters: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/cart_item"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/cart_item"
  "/api/v1/carts/{cart_id}/cart_items/{id}":
    parameters:
    - name: product_id
      in: query
      description: ID of the product
      required: true
      schema:
        type: integer
    - name: cart_id
      in: path
      description: ID of the cart_item
      required: true
      schema:
        type: integer
    - name: id
      in: path
      description: ID of the cart_item
      required: true
      schema:
        type: integer
    get:
      summary: show cart_item
      tags:
      - CartItems
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
    patch:
      summary: update cart_lines
      tags:
      - CartItems
      security:
      - Bearer: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/cart_item"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/cart_item"
    delete:
      summary: delete cart_lines
      tags:
      - CartItems
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
  "/api/v1/carts":
    get:
      summary: list carts
      tags:
      - Carts
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
    post:
      summary: create cart
      tags:
      - Carts
      security:
      - Bearer: []
      parameters: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/cart"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/cart"
  "/api/v1/carts/{id}":
    parameters:
    - name: id
      in: path
      description: ID of the cart
      required: true
      schema:
        type: integer
    get:
      summary: show cart
      tags:
      - Carts
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
    patch:
      summary: update cart
      tags:
      - Carts
      security:
      - Bearer: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/cart"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/cart"
  "/api/v1/categories":
    get:
      summary: list categories
      tags:
      - Categories
      responses:
        '200':
          description: successful
    post:
      summary: create category
      tags:
      - Categories
      security:
      - Bearer: []
      parameters: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/category"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/category"
  "/api/v1/categories/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show category
      tags:
      - Categories
      responses:
        '200':
          description: successful
    patch:
      summary: update category
      tags:
      - Categories
      security:
      - Bearer: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/category"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/category"
    delete:
      summary: delete category
      tags:
      - Categories
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
  "/api/v1/categories/{category_id}/products":
    parameters:
    - name: category_id
      in: path
      description: category_id
      required: true
      schema:
        type: integer
    get:
      summary: show category products list
      tags:
      - Products
      parameters:
      - name: limit
        in: query
        default: 20
        nullable: true
        description: limit items per page
        schema:
          type: integer
      - name: order
        in: query
        enum:
        - desc
        - asc
        default: desc
        nullable: true
        description: sort products by orders "desc" and "asc"
        schema:
          type: string
      - name: price
        in: query
        enum:
        - desc
        - asc
        default: desc
        nullable: true
        description: sort products by price "desc" and "asc"
        schema:
          type: string
      responses:
        '200':
          description: successful
          headers:
            current-page:
              schema:
                type: integer
              description: The number of current page paggination
            link:
              schema:
                type: string
              description: The page links of the next and previous pages
            page-items:
              schema:
                type: integer
              description: The items per page
            total-count:
              schema:
                type: integer
              description: The total of all items
            total-pages:
              schema:
                type: integer
              description: The total of all pages
            min-price:
              schema:
                type: integer
              description: Min. price of all items
            max-price:
              schema:
                type: integer
              description: Max. price  of all items
    post:
      summary: create product in category
      tags:
      - Products
      security:
      - Bearer: []
      parameters: []
      responses:
        '201':
          description: product created
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/product"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/product"
  "/api/v1/coupon":
    get:
      summary: show coupon
      tags:
      - Coupon
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
  "/api/v1/coupons":
    post:
      summary: create coupons
      tags:
      - Coupon
      parameters: []
      responses:
        '201':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/coupon"
  "/api/v1/favorites":
    get:
      summary: list favorites
      tags:
      - Favorite
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
    post:
      summary: create favorite
      tags:
      - Favorite
      security:
      - Bearer: []
      parameters: []
      responses:
        '201':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/favorite"
    delete:
      summary: destroy favorite
      tags:
      - Favorite
      security:
      - Bearer: []
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/favorite"
  "/api/v1/labels/{label_id}/fields":
    parameters:
    - name: label_id
      in: path
      description: label_id
      required: true
      schema:
        type: integer
    - name: product_id
      in: query
      description: product_id
      required: true
      schema:
        type: integer
    get:
      summary: show fields list
      tags:
      - Fields
      responses:
        '200':
          description: successful
    post:
      summary: create fields
      tags:
      - Fields
      security:
      - Bearer: []
      parameters: []
      responses:
        '201':
          description: product created
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/field"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/field"
  "/api/v1/labels/{label_id}/fields/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    - name: label_id
      in: path
      description: label_id
      required: true
      schema:
        type: integer
    - name: product_id
      in: query
      description: product_id
      required: true
      schema:
        type: integer
    get:
      summary: show field
      tags:
      - Fields
      responses:
        '200':
          description: successful
    patch:
      summary: update field
      tags:
      - Fields
      security:
      - Bearer: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/field"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/field"
    delete:
      summary: delete field
      tags:
      - Fields
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
  "/api/v1/filter_product":
    get:
      summary: filter product by author
      tags:
      - Filter
      parameters:
      - name: limit
        in: query
        default: 20
        nullable: true
        description: limit items per page
        schema:
          type: integer
      - name: author_name
        in: query
        schema:
          type: string
      - name: price_start
        in: query
        schema:
          type: string
      - name: price_end
        in: query
        schema:
          type: string
      responses:
        '200':
          description: successful
          headers:
            current-page:
              schema:
                type: integer
              description: The number of current page paggination
            link:
              schema:
                type: string
              description: The page links of the next and previous pages
            page-items:
              schema:
                type: integer
              description: The items per page
            total-count:
              schema:
                type: integer
              description: The total of all items
            total-pages:
              schema:
                type: integer
              description: The total of all pages
            min-price:
              schema:
                type: integer
              description: Min. price of all items
            max-price:
              schema:
                type: integer
              description: Max. price  of all items
  "/api/v1/labels":
    get:
      summary: show labels list
      tags:
      - Labels
      responses:
        '200':
          description: successful
    post:
      summary: create label
      tags:
      - Labels
      security:
      - Bearer: []
      parameters: []
      responses:
        '201':
          description: product created
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/label"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/label"
  "/api/v1/labels/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    get:
      summary: show label
      tags:
      - Labels
      responses:
        '200':
          description: successful
    patch:
      summary: update label
      tags:
      - Labels
      security:
      - Bearer: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/label"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/label"
    delete:
      summary: delete label
      tags:
      - Labels
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
  "/api/v1/password_reset":
    post:
      summary: password reset
      tags:
      - Passwords
      parameters: []
      responses:
        '200':
          description: successful
        '400':
          description: Bad Request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/api/v1/password_update":
    post:
      summary: password update
      tags:
      - Passwords
      security:
      - Bearer: []
      parameters: []
      responses:
        '200':
          description: successful
        '406':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/password_update"
  "/api/v1/products_awaitings":
    get:
      summary: Products with status awaiting
      tags:
      - Products
      parameters:
      - name: limit
        in: query
        default: 20
        nullable: true
        description: limit items per page
        schema:
          type: integer
      - name: order
        in: query
        enum:
        - desc
        - asc
        default: desc
        nullable: true
        description: sort products by orders "desc" and "asc"
        schema:
          type: string
      - name: price
        in: query
        enum:
        - desc
        - asc
        default: desc
        nullable: true
        description: sort products by price "desc" and "asc"
        schema:
          type: string
      - name: rating
        in: query
        enum:
        - desc
        - asc
        default: desc
        nullable: true
        description: sort products by rating "desc" and "asc"
        schema:
          type: string
      responses:
        '200':
          description: successful
          headers:
            current-page:
              schema:
                type: integer
              description: The number of current page paggination
            link:
              schema:
                type: string
              description: The page links of the next and previous pages
            page-items:
              schema:
                type: integer
              description: The items per page
            total-count:
              schema:
                type: integer
              description: The total of all items
            total-pages:
              schema:
                type: integer
              description: The total of all pages
            min-price:
              schema:
                type: integer
              description: Min. price of all items
            max-price:
              schema:
                type: integer
              description: Max. price  of all items
  "/api/v1/products_bestsellers":
    get:
      summary: Bestsellers products
      tags:
      - Products
      parameters:
      - name: limit
        in: query
        default: 20
        nullable: true
        description: limit items per page
        schema:
          type: integer
      - name: order
        in: query
        enum:
        - desc
        - asc
        default: desc
        nullable: true
        description: sort products by orders "desc" and "asc"
        schema:
          type: string
      - name: price
        in: query
        enum:
        - desc
        - asc
        default: desc
        nullable: true
        description: sort products by price "desc" and "asc"
        schema:
          type: string
      - name: rating
        in: query
        enum:
        - desc
        - asc
        default: desc
        nullable: true
        description: sort products by rating "desc" and "asc"
        schema:
          type: string
      responses:
        '200':
          description: successful
          headers:
            current-page:
              schema:
                type: integer
              description: The number of current page paggination
            link:
              schema:
                type: string
              description: The page links of the next and previous pages
            page-items:
              schema:
                type: integer
              description: The items per page
            total-count:
              schema:
                type: integer
              description: The total of all items
            total-pages:
              schema:
                type: integer
              description: The total of all pages
            min-price:
              schema:
                type: integer
              description: Min. price of all items
            max-price:
              schema:
                type: integer
              description: Max. price  of all items
  "/api/v1/products":
    get:
      summary: list products
      tags:
      - Products
      parameters:
      - name: limit
        in: query
        default: 20
        nullable: true
        description: limit items per page
        schema:
          type: integer
      - name: order
        in: query
        enum:
        - desc
        - asc
        default: desc
        nullable: true
        description: sort products by orders "desc" and "asc"
        schema:
          type: string
      - name: price
        in: query
        enum:
        - desc
        - asc
        default: desc
        nullable: true
        description: sort products by price "desc" and "asc"
        schema:
          type: string
      - name: rating
        in: query
        enum:
        - desc
        - asc
        default: desc
        nullable: true
        description: sort products by rating "desc" and "asc"
        schema:
          type: string
      responses:
        '200':
          description: successful
          headers:
            current-page:
              schema:
                type: integer
              description: The number of current page paggination
            link:
              schema:
                type: string
              description: The page links of the next and previous pages
            page-items:
              schema:
                type: integer
              description: The items per page
            total-count:
              schema:
                type: integer
              description: The total of all items
            total-pages:
              schema:
                type: integer
              description: The total of all pages
    post:
      summary: create product
      tags:
      - Products
      security:
      - Bearer: []
      parameters: []
      responses:
        '201':
          description: product created
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/product"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/product"
  "/api/v1/products/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    get:
      summary: show product
      tags:
      - Products
      responses:
        '200':
          description: successful
    patch:
      summary: update product
      tags:
      - Products
      security:
      - Bearer: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/product"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/product"
    delete:
      summary: delete product
      tags:
      - Products
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
  "/api/v1/products/{id}/add_label/{label_id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    - name: label_id
      in: path
      description: label_id
      required: true
      schema:
        type: integer
    post:
      summary: add label to product
      tags:
      - Products
      security:
      - Bearer: []
      responses:
        '200':
          description: label added successfully
  "/api/v1/products/{id}/remove_label/{label_id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    - name: label_id
      in: path
      description: label_id
      required: true
      schema:
        type: integer
    delete:
      summary: remove label from product
      tags:
      - Products
      security:
      - Bearer: []
      responses:
        '200':
          description: label removed successfully
  "/api/v1/products/{product_id}/reviews":
    parameters:
    - name: product_id
      in: path
      description: product_id
      required: true
      schema:
        type: string
    get:
      summary: product list reviews
      tags:
      - Reviews
      responses:
        '200':
          description: successful
    post:
      summary: product create review
      tags:
      - Reviews
      security:
      - Bearer: []
      parameters: []
      responses:
        '201':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/review"
  "/api/v1/search":
    get:
      summary: search products with a title and a description
      tags:
      - Search
      parameters:
      - name: limit
        in: query
        default: 20
        nullable: true
        description: limit items per page
        schema:
          type: integer
      - name: order
        in: query
        enum:
        - desc
        - asc
        default: desc
        nullable: true
        description: sort products by orders "desc" and "asc"
        schema:
          type: string
      - name: price
        in: query
        enum:
        - desc
        - asc
        default: desc
        nullable: true
        description: sort products by price "desc" and "asc"
        schema:
          type: string
      - name: query
        in: query
        schema:
          type: string
      responses:
        '200':
          description: successful
          headers:
            current-page:
              schema:
                type: integer
              description: The number of current page paggination
            link:
              schema:
                type: string
              description: The page links of the next and previous pages
            page-items:
              schema:
                type: integer
              description: The items per page
            total-count:
              schema:
                type: integer
              description: The total of all items
            total-pages:
              schema:
                type: integer
              description: The total of all pages
            min-price:
              schema:
                type: integer
              description: Min. price of all items
            max-price:
              schema:
                type: integer
              description: Max. price  of all items
        '422':
          description: unprocessable_entity
  "/api/v1/login":
    post:
      summary: login
      tags:
      - Sessions
      parameters: []
      responses:
        '200':
          description: successful
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/session"
  "/api/v1/subscription":
    get:
      summary: show subscription
      tags:
      - Subscriptions
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
  "/api/v1/subscriptions":
    post:
      summary: create subscription
      tags:
      - Subscriptions
      parameters: []
      responses:
        '201':
          description: subscription created
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/subscription"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/subscription"
  "/api/v1/unsubscription":
    delete:
      summary: destroy subscription
      tags:
      - Subscriptions
      parameters:
      - name: token
        in: query
        description: Token for updating the status of a subscription
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/v1/users/all":
    get:
      summary: list users
      tags:
      - Users
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
  "/api/v1/users":
    post:
      summary: create user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/user_response"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/user"
    get:
      summary: show user
      tags:
      - Users
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
    patch:
      summary: update user
      tags:
      - Users
      security:
      - Bearer: []
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/user_response"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/user"
    delete:
      summary: delete user
      tags:
      - Users
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
servers:
- url: https://{bookStoreHost}
  variables:
    bookStoreHost:
      default: book-store-api-tc-5855f695cf77.herokuapp.com
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: 127.0.0.1:3000
components:
  schemas:
    category:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        meta_title:
          type: string
          nullable: true
        meta_description:
          type: string
          nullable: true
      required:
      - name
    product:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        meta_title:
          type: string
          nullable: true
        meta_description:
          type: string
          nullable: true
        price:
          type: float
          default: 0.0
        special_price:
          type: float
          default: 0.0
        model:
          type: string
        quantity:
          type: integer
          default: 0
        image:
          type: array
          items:
            type: string
          nullable: true
        images:
          type: array
          items:
            type: string
          nullable: true
        category_id:
          type: integer
        status:
          type: string
          enum:
          - active
          - inactive
          - awaiting
          - archived
          default: active
      required:
      - name
      - description
    cart:
      type: object
      properties:
        status:
          type: string
          enum:
          - unpaid
          - paid
          - canceled
          default: unpaid
    cart_item:
      type: object
      properties:
        quantity:
          type: integer
          default: 0
        price:
          type: float
          default: 0.0
    user:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
      required:
      - first_name
      - last_name
      - email
      - password
    user_response:
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
        token:
          type: string
        expires:
          type: string
    session:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
      - email
      - password
    password_update:
      type: object
      properties:
        old_password:
          type: string
        password:
          type: string
      required:
      - old_password
      - password
    subscription:
      type: object
      properties:
        first_name:
          type: string
        email:
          type: string
      required:
      - email
    label:
      type: object
      properties:
        title:
          type: string
      required:
      - title
    field:
      type: object
      properties:
        value:
          type: string
      required:
      - value
    favorite:
      type: object
      properties:
        product_id:
          type: integer
      required:
      - product_id
    review:
      type: object
      properties:
        text:
          type: string
        rating:
          type: integer
      required:
      - text
      - rating
    coupon:
      type: object
      properties:
        first_name:
          type: string
        email:
          type: string
      required:
      - email
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      name: Authorization
      in: header
      description: Your Bearer token
